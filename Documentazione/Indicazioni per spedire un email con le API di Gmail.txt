## Copilot
Per inviare e-mail tramite Google Mail (Gmail) da un programma C# senza dover gestire la 3-way authentication, puoi utilizzare l'API di Gmail fornita da Google. Ecco come puoi farlo:
- Configurazione dell'Account Gmail:
    - Assicurati di avere un account Gmail che utilizzerai per inviare le e-mail. Se non ne hai uno, creane uno su Gmail.
- Abilita l'Accesso alle App Meno Sicure:
    - Accedi al tuo account Gmail e vai alla pagina delle impostazioni di sicurezza: Impostazioni di Sicurezza.
    - Abilita l'opzione "Consenti app meno sicure" per consentire l'accesso alle app che utilizzano meno metodi di autenticazione avanzati.
- Utilizzo della Libreria Google .NET Client:
    - Utilizza la libreria Google.Apis.Gmail.v1 per interagire con l'API di Gmail tramite C#.
    - Installa il pacchetto NuGet Google.Apis.Gmail.v1 nel tuo progetto C#.
- Esempio di Invio di E-mail:
    - Di seguito Ã¨ riportato un esempio di come inviare un'e-mail utilizzando la libreria Google .NET Client:

using System;
using System.Net;
using System.Net.Mail;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Gmail.v1;
using Google.Apis.Gmail.v1.Data;
using Google.Apis.Services;

class Program
{
    static void Main()
    {
        // Credenziali OAuth 2.0 (crea un progetto su Google Cloud Console e configura le credenziali)
        UserCredential credential; // Ottieni le credenziali in modo sicuro

        // Inizializza il servizio Gmail
        var service = new GmailService(new BaseClientService.Initializer
        {
            HttpClientInitializer = credential,
            ApplicationName = "NomeApp"
        });

        // Creazione del messaggio
        var msg = new Message
        {
            Raw = Base64UrlEncode(CreateEmail("destinatario@example.com", "Oggetto", "Corpo del messaggio"))
        };

        // Invio del messaggio
        service.Users.Messages.Send(msg, "me").Execute();
    }

    // Creazione del messaggio e codifica in Base64
    private static string CreateEmail(string to, string subject, string body)
    {
        var msg = new MailMessage("mittente@gmail.com", to, subject, body);
        var msgBytes = System.Text.Encoding.UTF8.GetBytes(msg.ToString());
        return Convert.ToBase64String(msgBytes);
    }

    // Codifica in Base64 URL-safe
    private static string Base64UrlEncode(string input)
    {
        var inputBytes = System.Text.Encoding.UTF8.GetBytes(input);
        return Convert.ToBase64String(inputBytes)
            .Replace('+', '-')
            .Replace('/', '_')
            .TrimEnd('=');
    }
}

    - Assicurati di sostituire mittente@gmail.com, destinatario@example.com, Oggetto e Corpo del messaggio con i valori appropriati.
    - Le credenziali OAuth 2.0 devono essere ottenute in modo sicuro (ad esempio, tramite autenticazione dell'utente o utilizzando un token di servizio).
Ricorda di proteggere le credenziali e di gestire gli errori in modo appropriato. Buona programmazione! ðŸ“§ðŸ”’
